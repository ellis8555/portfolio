*******************************
images
********************************

If the image category has many images then in that folder either create a .js file that will hold all the import and exports for that group of images.
'./images/hobbies/web-dev/allWebdevImages.js' has example. In that folder an array of image objects was created used for looping through images so they can be injected dynamically
If a particular folder has a master .js import/export file export those to the image folder's 'allImages.js' so they can all be imported from a single location

*******************************
components
********************************

create a .js file named as close as possible to what that component will be displaying
import { createRouteContainer } from "/utilities/allUtilities" be sure to get the path correct
'createRouteContainer' creates a div and applies an id. This is the container that will be injected into the #root element
in that parent .js file create the shell of the component
also create any title as well
insert a div with an #id that will contain the content of that component which will be injected as a FRAG (ment)
create a variable that is named what the element is and add 'Element' to the end.
assign that variable the value of createRouteContainer method
**example** const aboutMeElement = createRouteContainer(aboutMe, "about-me");
export that variable as well
import this variable most likely into ./utilities/routes/routeChange.js

****component specific methods****
place any of these methods into a folder that appends '-methods' to that folder's name

